{"name":"Lu-decomposition","tagline":"","body":"lu-decomposition\r\n================\r\nImplementing LU decomposition in Python, using Crout's Algorithm.  \r\nFor implementation in Cython, see the [Cython branch](https://github.com/shannonzylstra/lu-decomposition/tree/Cython)\r\nof this repository.  \r\nAlso -- if you have the stomach for it, you can glance at [my sage notebook log](http://480.sagenb.org/home/Shannon_Zylstra/6/print). <-- My bad: I thought this was public!\r\n### The \"Math\"\r\n\r\nGiven a square matrix A, crout(A) will return matrices L and U such that A = L*U.  \r\nL is lower triangular, and U is unit upper triangular.\r\n\r\n### Files\r\ncrout.py\r\n\r\n### Examples\r\n\r\nIn the sage command line (after loading the .py file!):\r\n\r\n    sage: a = [[1, 3, 5], [2, 4, 7], [1, 1, 0]]\r\n    sage: crout(a)\r\n    ([[1.0, 0, 0], [2.0, -2.0, 0], [1.0, -2.0, -2.0]], [[1.0, 3.0, 5.0], [0, 1.0, 1.5], [0, 0, 1.0]])\r\n\r\nIf we want to view L and U separately:\r\n\r\n    sage: L = crout(a)[0]\r\n    sage: U = crout(a)[1]\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}